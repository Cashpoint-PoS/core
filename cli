#!/usr/bin/env php
<?php
if(php_sapi_name()!="cli")
  throw new Exception("only CLI usage allowed!");

//install the tables of a plugin using the latest scheme definition
//$p: path to the plugin root
//$insert: insert the plugin into the plugins table
function plugin_db_install($p,$insert=true) {
  if(!is_file($p."/metadata.json"))
    continue;
  $c=json_decode(file_get_contents($p."/metadata.json"));
  if($c===false || $c===null)
    throw new Exception("Plugin $p has no valid metadata json\n");
  foreach($c->tables as $t) {
  	$rev=$c->tableRevs->$t;
  	$schema=file_get_contents("$p/schema/$t.$rev.sql");
  	if($schema===false)
  		throw new Exception("invalid schema file for $t/$rev");
  	$q=new DB_Query($schema);
  }
  //insert the schema version into the revs table
  //note that we only do this after a fully successful install!
  foreach($c->tables as $t) {
  	$rev=$c->tableRevs->$t;
  	$q=new DB_Query("insert into revs set name=?,rev=?",$t,$rev);
  }
  if($insert) {
  	$q=new DB_Query("insert into plugins set name=?,displayname=?,directory=?,active=1",$c->name,$c->desc,$p."/");
  }
}

function displayUsage($rc=1) {
  echo "Usage: ./cli op [params]\n";
  echo "op gitstatus: show git status for core and plugins\n";
  echo "op gitpush: push core and plugin repos to upstream\n";
  echo "op gitpull: pull core and plugin repos from upstream\n";
  echo "op genschema: build table SQL definitions\n";
  echo "op help: show this help\n";
  exit($rc);
}

if(!isset($argv[1]))
  displayUsage();

switch($argv[1]) {
  case "gitstatus":
		$paths=glob("./plugins/*",GLOB_ONLYDIR);
		array_unshift($paths,".");
		$files=array();
		foreach($paths as $p) {
			if(is_file($p."/NOCOMMIT"))
				continue;
			$out=array();
			exec("cd '$p' && git status --porcelain",$out,$rc);
			foreach($out as $l) {
				list($status,$fn)=explode(" ",trim($l),2);
				$fn=trim($fn);
				$files[]=array("status"=>$status,"fn"=>"$p/$fn");
			}
		}
		foreach($files as $f)
			printf("%s %s\n",str_pad($f["status"],2),$f["fn"]);
  break;
  case "gitpush":
  	$paths=glob("./plugins/*",GLOB_ONLYDIR);
		array_unshift($paths,".");
		$files=array();
		foreach($paths as $p) {
			if(is_file($p."/NOCOMMIT"))
				continue;
			system("cd '$p' && git push",$rc);
		}
  break;
  case "gitpull":
  	$paths=glob("./plugins/*",GLOB_ONLYDIR);
		array_unshift($paths,".");
		$files=array();
		foreach($paths as $p) {
			if(is_file($p."/NOCOMMIT"))
				continue;
			system("cd '$p' && git pull",$rc);
		}
  break;
  case "genschema":
  	$paths=glob("./plugins/*",GLOB_ONLYDIR);
		array_unshift($paths,".");
		$files=array();
		require("config.php");
		require("DB.php");
		require("DB_Query.php");
		require("lib/functions.php");
		$tables_count=array();
		foreach($paths as $p) {
			if(is_file($p."/NOCOMMIT"))
				continue;
			if(!is_file($p."/metadata.json"))
				continue;
			$c=json_decode(file_get_contents($p."/metadata.json"));
			if($c===false || $c===null) {
				echo "Plugin $p has no valid metadata json\n";
				continue;
			}
			$metaChanged=false;
			echo "Plugin $p checking tables\n";
			foreach($c->tables as $t) {
				echo "Plugin $p checking table $t\n";
				$q=new DB_Query("SHOW CREATE TABLE $t");
				$r=$q->fetch();
				$schema_new=$r["Create Table"];
				//CREATE_TABLE includes AUTO_INCREMENT value which is pointless for us...
				$schema_new=preg_replace('@ (AUTO_INCREMENT=(.*)) @isU',' AUTO_INCREMENT=1 ',$schema_new);
				
				$tables_count[$t]=true;
				if(!isset($c->tableRevs)) {
					echo "Plugin $p has tableRevs not set\n";
					$c->tableRevs=new stdClass();
					$metaChanged=true;
				}
				if(!isset($c->tableRevs->$t)) {
					echo "Plugin $p has tableRevs for $t not set\n";
					$c->tableRevs->$t=0;
					$fp=fopen($p."/schema/$t.0.sql","w");
					fwrite($fp,$schema_new);
					fclose($fp);
					exec("cd '$p' && git add schema/$t.0.sql && git commit -m 'add schema for table $t'");
					$metaChanged=true;
					continue;
				}
				$schema_old=file_get_contents($p."/schema/$t.".$c->tableRevs->$t.".sql");
				if($schema_old!=$schema_new) {
					echo "Plugin $p detected schema change in $t\n";
					$q=new DB_Query("drop database if exists r".$c->tableRevs->$t);
					$q=new DB_Query("drop database if exists r".($c->tableRevs->$t+1));
					$q=new DB_Query("create database if not exists r".$c->tableRevs->$t);
					$q=new DB_Query("create database if not exists r".($c->tableRevs->$t+1));
					mysqli_select_db(DB::get()->getLink(),"r".$c->tableRevs->$t);
					$q=new DB_Query($schema_old);
					mysqli_select_db(DB::get()->getLink(),"r".($c->tableRevs->$t+1));
					$q=new DB_Query($schema_new);
					exec(sprintf("mysqldbcompare --server1='%s:%s@%s' r%d:r%d --difftype=sql --skip-object-compare --skip-row-count --skip-data-check -a",$config["db"]["user"],$config["db"]["pass"],$config["db"]["host"],$c->tableRevs->$t,($c->tableRevs->$t+1)),$out,$rc);
					$startprocessing=false;
					$delta="";
					foreach($out as $line) {
						//trim the garbage (mysqldbcompare apparently has some bugs, see http://pastebin.com/HjRiTEk1)
						if(!$startprocessing) {
							if(strpos($line,"--changes-for=server1")!==false)
								$startprocessing=true;
							else
								continue;
						}
						$line=trim($line);
						if($line=="" || substr($line,0,1)=="#" || $line=="Databases are consistent given skip options specified.")
							continue;
						$delta.=$line."\n";
					}
					$q=new DB_Query("drop database r".$c->tableRevs->$t);
					$q=new DB_Query("drop database r".($c->tableRevs->$t+1));
					mysqli_select_db(DB::get()->getLink(),$config["db"]["db"]);
					$delta=str_replace("r".$c->tableRevs->$t.".$t",$t,$delta);
					$fp=fopen($p."/schema/upgrade.$t.".$c->tableRevs->$t.".".($c->tableRevs->$t+1).".sql","w");
					fwrite($fp,$delta);
					fclose($fp);
					$fp=fopen($p."/schema/$t.".($c->tableRevs->$t+1).".sql","w");
					fwrite($fp,$schema_new);
					fclose($fp);
					exec("cd '$p' && git add schema/$t.".($c->tableRevs->$t+1).".sql");
					exec("cd '$p' && git add schema/upgrade.$t.".$c->tableRevs->$t.".".($c->tableRevs->$t+1).".sql");
					exec("cd '$p' && git commit -m 'updated schema for $t'");
					$c->tableRevs->$t=$c->tableRevs->$t+1;
					$metaChanged=true;
					echo "Plugin $p wrote schema update of table $t\n";
				}
			}
			if($metaChanged) {
				$fp=fopen($p."/metadata.json","w");
				fwrite($fp,pretty_json(json_encode($c,JSON_HEX_TAG|JSON_HEX_APOS|JSON_HEX_QUOT|JSON_HEX_AMP)));
				fclose($fp);
				echo "Plugin $p writing new metadata\n";
				exec("cd '$p' && git add metadata.json");
				echo "Plugin $p committing new metadata\n";
				exec("cd '$p' && git commit -m 'metadata update via genschema'");
			}
		}
		echo "Created schemata files of ".sizeof($tables_count)." tables\n";
  break;
  case "formatmetadata":
  	require("lib/functions.php");
  	$paths=glob("./plugins/*",GLOB_ONLYDIR);
		array_unshift($paths,".");
		$files=array();
		foreach($paths as $p) {
			if(is_file($p."/NOCOMMIT"))
				continue;
			if(!is_file($p."/metadata.json"))
				continue;
			$c=json_decode(file_get_contents($p."/metadata.json"));
			if($c===false || $c===null) {
				echo "Plugin $p has no valid metadata json\n";
				continue;
			}
      $fp=fopen($p."/metadata.json","w");
      fwrite($fp,pretty_json(json_encode($c,JSON_HEX_TAG|JSON_HEX_APOS|JSON_HEX_QUOT|JSON_HEX_AMP)));
      fclose($fp);
      echo "Plugin $p writing new metadata\n";
      exec("cd '$p' && git add metadata.json");
      echo "Plugin $p committing new metadata\n";
      exec("cd '$p' && git commit -m 'metadata format'");
		}
  break;
  case "setup":
  	require("lib/functions.php");
  	printf("Welcome to the CashPoint Core Installer.\n");
  	printf("In case the supplied database does not exist, it will be created for you.\n");
  	if(is_file("config2.php")) {
  		echo "using existing configuration file\n";
  		require("config2.php");
  	} else {
  		echo "creating new configuration file\n";
  		$f=file_get_contents("config.php.tpl");
  		preg_match_all("@%%(.*)%%@isU",$f,$hit);
  		foreach($hit[0] as $idx=>$ph) {
  			$name=$hit[1][$idx];
  			switch($name) {
  				case "DBHOST":
  					printf("Please enter the MySQL database host: ");
  					$replacement=trim(fgets(STDIN));
  				break;
  				case "DBUSER":
  					printf("Please enter the MySQL database user: ");
  					$replacement=trim(fgets(STDIN));
  				break;
  				case "DBPASS":
  					printf("Please enter the MySQL database password: ");
  					$replacement=getPassword(true);
  					printf("\n");
  				break;
  				case "DBNAME":
  					printf("Please enter the MySQL database name: ");
  					$replacement=trim(fgets(STDIN));
  				break;
  				case "WEBROOT":
  					printf("Please enter the full URL of the website directory here: ");
  					$replacement=trim(fgets(STDIN));
  				break;
  				default:
  					throw new Exception(sprintf("unknown placeholder name '%s'\n",$name));
  			}
  			$f=str_replace($ph,$replacement,$f);
  		}
  		$fp=fopen("config2.php","w");
  		fwrite($fp,$f);
  		fclose($fp);
  	}
  	require("DB.php");
  	require("DB_Query.php");
  	echo "Attempting to connect to database\n";
  	$conn=new mysqli($config["db"]["host"],$config["db"]["user"],$config["db"]["pass"]);
  	if($conn->connect_error)
  		throw new Exception(sprintf("MySQL connection failed: %s (%d)",$conn->connect_error,$conn->connect_errno));
  	echo "Connection established, creating database if it doesn't exist\n";
  	$res=$conn->query("CREATE DATABASE IF NOT EXISTS `".$config["db"]["db"]."`");
  	if($res===false)
  		throw new Exception(sprintf("CREATE TABLE failed: %s (%d)",$conn->error,$conn->errno));
  	$conn->close();
  	echo "Re-establishing connection\n";
  	DB::get();
  	echo "Installing core tables\n";
  	plugin_db_install(".",false);
  	echo "Core setup finished. Now, please install the core plugins.\n";
  break;
  case "installplugin":
  	if(!isset($argv[2]))
  		displayUsage();
  	require("config2.php");
  	require("DB.php");
  	require("DB_Query.php");
  	$pn=$argv[2];
  	$md=@file_get_contents("https://raw.githubusercontent.com/Cashpoint-PoS/plugin-$pn/master/metadata.json");
  	if($md===false)
  		throw new Exception("Plugin $pn not found");
  	$md=json_decode($md);
  	if($md===false||$md===null)
  		throw new Exception("Plugin $pn has invalid metadata");
  	printf("Installing plugin %s\n",$pn);
  	system("git clone https://github.com/Cashpoint-PoS/plugin-$pn.git plugins/$pn",$rc);
  	if($rc!=0)
  		throw new Exception("Could not fetch plugin $pn");
  	printf("Installing plugin DB tables\n");
  	plugin_db_install("plugins/$pn");
  	printf("Plugin $pn successfully installed\n");
  break;
  case "genskelclass":
  	if(!isset($argv[2]))
  		displayUsage();
  	require("config.php");
  	require("DB.php");
  	require("DB_Query.php");
  	$plugin=$argv[2];
  	printf("Creating new class in %s\n",$plugin);
  	
  	printf("Please enter the class name: ");
  	$replace["CLASSNAME"]=trim(fgets(STDIN));
  	
  	printf("Please enter the module name: ");
  	$replace["MODNAME"]=trim(fgets(STDIN));
  	
  	printf("Please enter the sub name: ");
  	$replace["SUBNAME"]=trim(fgets(STDIN));
  	
  	printf("Please enter the underlying DB table: ");
  	$replace["DBTABLE"]=trim(fgets(STDIN));
  	
  	$q=new DB_Query("describe ".$replace["DBTABLE"]);
  	if($q->numRows<1)
  		throw new Exception("Error while fetching table description");

  	$replace["ELEMENTS"]="";
  	$replace["LISTELEMENTS"]="";
  	$replace["DETAILELEMENTS"]="";
  	$replace["EDITELEMENTS"]="";
  	while($r=$q->fetch()) {
  		if(in_array($r["Field"],array("tenant","id","creator","last_editor","create_time","modify_time")))
  			continue; //these do not end up in the elements list
  		$replace["ELEMENTS"].=sprintf('"%s"=>array("title"=>"","mode"=>"string","dbkey"=>"%s"),',$r["Field"],$r["Field"])."\n";
  		$replace["LISTELEMENTS"].=sprintf('"%s",',$r["Field"])."\n";
  		$replace["DETAILELEMENTS"].=sprintf('"%s",',$r["Field"])."\n";
  		$replace["EDITELEMENTS"].=sprintf('"%s",',$r["Field"])."\n";
  	}
		
		$skel=file_get_contents("plugins/class.skel.php");
		foreach($replace as $k=>$v) {
			$skel=str_replace("%%$k%%",$v,$skel);
		}
		$fp=fopen("plugins/$plugin/class.".$replace["CLASSNAME"].".php","w");
		fwrite($fp,$skel);
		fclose($fp);
		printf("Created class %s in plugin %s\n",$replace["CLASSNAME"],$plugin);
		printf("Do not forget to add it in backend.php\n");
  break;
  case "help":
    displayUsage(0);
  break;
  default:
    displayUsage();
}
